// SPDX-License-Identifier: MIT

import "./abstract/Ownable.sol";
import "./abstract/Pausable.sol";
import "./abstract/ReaperBaseStrategy.sol";
import "./interfaces/IERC20.sol";
import "./interfaces/IUniswapRouterETH.sol";
import "./interfaces/ISupplyVaultRouter01.sol";
import "./interfaces/IBorrowable.sol";
import "./interfaces/ISupplyVault.sol";
import "./interfaces/IXStakingPoolController.sol";
import "./libraries/SafeERC20.sol";
// import "./libraries/BorrowableHelpers.sol";

import "hardhat/console.sol";

pragma solidity 0.8.9;

/**
 * @dev This is a strategy to stake Boo into xBoo, and then stake xBoo in different pools to collect more rewards
 * The strategy will compound the pool rewards into Boo which will be deposited into the strategy for more yield.
 */
contract ReaperAutoCompoundTarot is ReaperBaseStrategy {
    using SafeERC20 for IERC20;

    /**
     * @dev Tokens Used:
     * {WFTM} - Required for liquidity routing when doing swaps. Also used to charge fees on yield.
     * {xBoo} - Token generated by staking our funds. Also used to stake in secondary pools.
     * {XTAROT} - Token that the strategy maximizes.
     */
    address public constant WFTM =
        address(0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83);
    address public constant TAROT =
        address(0xC5e2B037D30a390e62180970B3aa4E91868764cD);
    ISupplyVault public constant XTAROT =
        ISupplyVault(0x74D1D2A851e339B8cB953716445Be7E8aBdf92F4);

    /**
     * @dev Third Party Contracts:
     * {UNI_ROUTER} - the UNI_ROUTER for target DEX
     * {POOL_CONTROLLER} - Address to XStakingPoolController, the SpookySwap contract to stake xBoo
     */
    address public constant UNI_ROUTER =
        0xF491e7B69E4244ad4002BC14e878a34207E38c29;
    address public constant POOL_CONTROLLER =
        0x466eBD9EC2027776fa11a982E9BBe4F67aa6e86B;

    /**
     * @dev Routes we take to swap tokens
     * {wftmToBooRoute} - Route we take to get from {WFTM} into {XTAROT}.
     * {poolRewardToWftmPaths} - Routes for each pool to get from {pool reward token} into {WFTM}.
     */
    address[] public wftmToTarotRoute = [WFTM, TAROT];
    mapping(uint256 => address[]) public poolRewardToWftmPaths;

    /**
     * @dev Variables for pool selection
     * {currentPoolId} - Pool id for the the current pool the strategy deposits xBoo into
     * {currentlyUsedPools} - A list of all pool ids currently being used by the strategy
     * {poolYield} - The estimated yield in WFTM for each pool over the next 1 day
     * {hasAllocatedToPool} - If a given pool id has been deposited into already for a harvest cycle
     * {WFTM_POOL_ID} - Id for the WFTM pool to use as default pool before pool selection
     * {maxPoolDilutionFactor} - The factor that determines what % of a pools total TVL can be deposited (to avoid dilution)
     * {maxNrOfPools} - The maximum amount of pools the strategy can use
     */
    uint256 public currentPoolId;
    uint256[] public currentlyUsedPools;
    mapping(uint256 => uint256) public poolYield;
    mapping(uint256 => bool) public hasAllocatedToPool;
    uint256 public maxPoolDilutionFactor = 5;
    uint256 public maxNrOfPools = 15;

    /**
     * @dev Variables for pool selection
     * {totalPoolBalance} - The total amount of xBoo currently deposited into pools
     * {poolxTarotBalance} - The amount of xBoo deposited into each pool
     */
    uint256 public totalPoolBalance = 0;
    mapping(uint256 => uint256) public poolxTarotBalance;

    /**
     * {UpdatedStrategist} Event that is fired each time the strategist role is updated.
     */
    event UpdatedStrategist(address newStrategist);

    /**
     * @dev Initializes the strategy. Sets parameters, saves routes, and gives allowances.
     * @notice see documentation for each variable above its respective declaration.
     */
    constructor(
        address _vault,
        address _treasury,
        address _strategist
    ) ReaperBaseStrategy(_vault, _treasury, _strategist) {
        _giveAllowances();
    }

    /**
     * @dev Function that puts the funds to work.
     * It gets called whenever someone deposits in the strategy's vault contract.
     * It deposits {XTAROT} into xBoo (BooMirrorWorld) to farm {xBoo} and finally,
     * xBoo is deposited into other pools to earn additional rewards
     */
    function deposit() public whenNotPaused {
        uint256 xTarotBalance = IERC20(XTAROT).balanceOf(address(this));

        if (xTarotBalance != 0) {
            _stakingControllerDeposit(currentPoolId, xTarotBalance);
        }
    }

    /**
     * @dev Function to deposit into XStakingPoolController while keeping internal accounting
     *      updated.
     */
    function _stakingControllerDeposit(uint256 _poolId, uint256 _xTarotAmount)
        internal
    {
        totalPoolBalance = totalPoolBalance + _xTarotAmount;
        poolxTarotBalance[_poolId] = poolxTarotBalance[_poolId] + _xTarotAmount;
        IXStakingPoolController(POOL_CONTROLLER).deposit(
            currentPoolId,
            _xTarotAmount
        );
    }

    /**
     * @dev Withdraws funds and sents them back to the vault.
     * It withdraws {XTAROT} from the XStakingPoolController pools.
     * The available {XTAROT} minus fees is returned to the vault.
     */
    function withdraw(uint256 _amount) external {
        require(msg.sender == vault, "!vault");

        uint256 xTarotBalance = IERC20(XTAROT).balanceOf(address(this));

        console.log("withdraw");

        console.log("_amount: ", _amount);

        if (xTarotBalance < _amount) {
            console.log("for loop");
            console.log(
                "currentlyUsedPools.length: ",
                currentlyUsedPools.length
            );
            for (
                uint256 index = currentlyUsedPools.length;
                index > 0 && xTarotBalance < _amount;
                index--
            ) {
                uint256 poolId = currentlyUsedPools[index - 1];
                console.log("poolId: ", poolId);
                uint256 currentPoolxTarotBalance = poolxTarotBalance[poolId];
                console.log(
                    "currentPoolxTarotBalance: ",
                    currentPoolxTarotBalance
                );
                if (currentPoolxTarotBalance > 0) {
                    uint256 remainingxTarotAmount = _amount - xTarotBalance;
                    uint256 withdrawAmount;
                    if (remainingxTarotAmount > currentPoolxTarotBalance) {
                        withdrawAmount = currentPoolxTarotBalance;
                    } else {
                        withdrawAmount = remainingxTarotAmount;
                    }
                    console.log("withdrawAmount: ", withdrawAmount);
                    _stakingControllerWithdraw(poolId, withdrawAmount);
                    xTarotBalance = IERC20(XTAROT).balanceOf(address(this));
                    if (xTarotBalance >= _amount) {
                        break;
                    }
                }
            }
        }
        if (xTarotBalance > _amount) {
            xTarotBalance = _amount;
        }

        uint256 withdrawFee = (xTarotBalance * securityFee) / PERCENT_DIVISOR;
        console.log(
            "xTarotBalance - withdrawFee: ",
            xTarotBalance - withdrawFee
        );
        IERC20(XTAROT).safeTransfer(vault, xTarotBalance - withdrawFee);
    }

    /**
     * @dev Function to withdraw from XStakingPoolController while keeping internal accounting
     *      updated.
     */
    function _stakingControllerWithdraw(uint256 _poolId, uint256 _xTokenAmount)
        internal
    {
        totalPoolBalance = totalPoolBalance - _xTokenAmount;
        poolxTarotBalance[_poolId] = poolxTarotBalance[_poolId] - _xTokenAmount;
        IXStakingPoolController(POOL_CONTROLLER).withdraw(
            _poolId,
            _xTokenAmount
        );
    }

    /**
     * @dev Check if the internal pool accounting matches with AceLab
     */
    function isInternalAccountingAccurate() external view returns (bool) {
        uint256 total = 0;
        for (uint256 index = 0; index < currentlyUsedPools.length; index++) {
            uint256 _poolId = currentlyUsedPools[index];
            (uint256 amount, ) = IXStakingPoolController(POOL_CONTROLLER)
                .userInfo(_poolId, address(this));
            uint256 internalBalance = poolxTarotBalance[_poolId];
            total = total + amount;
            if (amount != internalBalance) {
                return false;
            }
        }
        if (total != totalPoolBalance) {
            return false;
        }
        return true;
    }

    /**
     * @dev If internal accounting is off this function can synchronize
     *      the internal pool accounting with AceLab
     */
    function updateInternalAccounting() external returns (bool) {
        _onlyStrategistOrOwner();
        uint256 total = 0;
        for (uint256 index = 0; index < currentlyUsedPools.length; index++) {
            uint256 _poolId = currentlyUsedPools[index];
            (uint256 amount, ) = IXStakingPoolController(POOL_CONTROLLER)
                .userInfo(_poolId, address(this));
            poolxTarotBalance[_poolId] = amount;
            total = total + amount;
        }
        totalPoolBalance = total;
        return true;
    }

    /**
     * @dev Core function of the strat, in charge of collecting and re-investing rewards.
     * 1. It claims rewards from the XStakingPoolController pools and estimated the current yield for each pool.
     * 2. It charges the system fees to simplify the split.
     * 3. It swaps the {WFTM} token for {Boo} which is deposited into {xBoo}
     * 4. It distributes the xBoo using a yield optimization algorithm into various pools.
     */
    function _harvestCore() internal override {
        _collectRewardsAndEstimateYield();
        _chargeFees();
        uint256 tarotBalance = _swapWftmToTarot();
        _enterXTarot(tarotBalance);
        _rebalance();
    }

    /**
     * @dev Returns the approx amount of profit from harvesting.
     *      Profit is denominated in WFTM, and takes fees into account.
     */
    function estimateHarvest()
        external
        view
        override
        returns (uint256 profit, uint256 callFeeToUser)
    {
        for (uint256 index = 0; index < currentlyUsedPools.length; index++) {
            uint256 poolId = currentlyUsedPools[index];
            uint256 pendingReward = IXStakingPoolController(POOL_CONTROLLER)
                .pendingReward(poolId, address(this));
            if (pendingReward == 0) {
                continue;
            }

            if (poolRewardToWftmPaths[poolId][0] == WFTM) {
                profit = profit + pendingReward;
            } else {
                uint256[] memory amountOutMins = IUniswapRouterETH(UNI_ROUTER)
                    .getAmountsOut(
                        pendingReward,
                        poolRewardToWftmPaths[poolId]
                    );
                profit = profit + amountOutMins[1];
            }
        }

        // // take out fees from profit
        uint256 wftmFee = (profit * totalFee) / PERCENT_DIVISOR;
        callFeeToUser = (wftmFee * callFee) / PERCENT_DIVISOR;
        profit = profit - wftmFee;
    }

    /**
     * @dev Collects reward tokens from all used pools, swaps it into WFTM and estimates
     * the yield for each pool.
     */
    function _collectRewardsAndEstimateYield() internal {
        uint256 nrOfUsedPools = currentlyUsedPools.length;
        for (uint256 index = 0; index < nrOfUsedPools; index++) {
            uint256 poolId = currentlyUsedPools[index];
            uint256 currentPoolxTarotBalance = poolxTarotBalance[poolId];
            hasAllocatedToPool[poolId] = false;
            _stakingControllerWithdraw(poolId, currentPoolxTarotBalance);
            _leaveSupplyVault(poolId);
            _swapRewardToWftm(poolId);
            _setEstimatedYield(poolId);
        }
    }

    function _leaveSupplyVault(uint256 _poolId) internal {
        ISupplyVault rewardToken = IXStakingPoolController(POOL_CONTROLLER)
            .poolInfo(_poolId)
            .RewardToken;
        uint256 underlyingBalance = ISupplyVault(rewardToken)
            .underlyingBalanceForAccount(address(this));
        uint256 shares = ISupplyVault(rewardToken).underlyingValuedAsShare(
            underlyingBalance
        );
        if (shares != 0) {
            ISupplyVault(rewardToken).leave(shares);
        }
    }

    /**
     * @dev Swaps any pool reward token to WFTM
     */
    function _swapRewardToWftm(uint256 _poolId) internal {
        address[] memory rewardToWftmPaths = poolRewardToWftmPaths[_poolId];
        address underlyingRewardToken = rewardToWftmPaths[0];
        uint256 rewardBalance = IERC20(underlyingRewardToken).balanceOf(
            address(this)
        );

        if (rewardBalance != 0 && underlyingRewardToken != WFTM) {
            IUniswapRouterETH(UNI_ROUTER)
                .swapExactTokensForTokensSupportingFeeOnTransferTokens(
                    rewardBalance,
                    0,
                    rewardToWftmPaths,
                    address(this),
                    block.timestamp + 10
                );
        }
    }

    /**
     * @dev Estimates yield in WFTM per pool over a given time period
     *      This is done by taking the total amount of tokens emitted
     *      and dividing it by the total amount of xBoo staked in the
     *      pool, and then converted to WFTM to give a common unit.
     */
    function _setEstimatedYield(uint256 _poolId) internal {
        IXStakingPoolController.PoolInfo
            memory poolInfo = IXStakingPoolController(POOL_CONTROLLER).poolInfo(
                _poolId
            );
        uint256 _from = block.timestamp;
        // Look forward in time by the same time it took between the previous and current harvest
        uint256 _to = block.timestamp;
        if (lastHarvestTimestamp != 0) {
            _to = _to + block.timestamp - lastHarvestTimestamp;
        } else {
            // Default when timestamp is missing
            _to = _to + 1 days;
        }
        // Total seconds the pool will receive rewards up to the next harvest (when strategy rebalances)
        uint256 multiplier = _getMultiplier(_from, _to, poolInfo);
        console.log("multiplier: ", multiplier);
        uint256 totalTokens = multiplier * poolInfo.RewardPerSecond;
        console.log("totalTokens: ", totalTokens);
        if (totalTokens == 0) {
            poolYield[_poolId] = 0;
            return;
        }

        if (poolRewardToWftmPaths[_poolId][0] == WFTM) {
            console.log("poolRewardToWftmPaths[_poolId][0] == WFTM");
            uint256 wftmYield = (1 ether * totalTokens) /
                poolInfo.xTAROTStakedAmount;
            poolYield[_poolId] = wftmYield;
            console.log("wftmYield: ", wftmYield);
        } else {
            uint256 wftmTotalPoolYield = IUniswapRouterETH(UNI_ROUTER)
                .getAmountsOut(totalTokens, poolRewardToWftmPaths[_poolId])[1];
            uint256 wftmYield = (1 ether * wftmTotalPoolYield) /
                poolInfo.xTAROTStakedAmount;
            poolYield[_poolId] = wftmYield;
        }
    }

    /**
     * @dev This was copied from the AceLab contract, it was an internal
     *      function so could not be called. It calculates the amount of
     *      seconds in the given timespan that the pool will receive
     *      rewards. This prevents the strategy from allocating to pools
     *      that are ending. So it helps projects the yield in the future.
     */
    function _getMultiplier(
        uint256 _from,
        uint256 _to,
        IXStakingPoolController.PoolInfo memory pool
    ) private pure returns (uint256) {
        _from = _from > pool.startTime ? _from : pool.startTime;
        if (_from > pool.endTime || _to < pool.startTime) {
            return 0;
        }
        if (_to > pool.endTime) {
            return pool.endTime - _from;
        }
        return _to - _from;
    }

    /**
     * @dev Takes out fees from the rewards. Set by constructor
     * callFeeToUser is set as a percentage of the fee,
     * as is treasuryFeeToVault
     */
    function _chargeFees() internal {
        if (totalFee == 0) {
            return;
        }
        uint256 wftmBalance = IERC20(WFTM).balanceOf(address(this));

        if (wftmBalance == 0) {
            return;
        }
        uint256 wftmFee = (wftmBalance * totalFee) / PERCENT_DIVISOR;
        console.log("wftmFee: ", wftmFee);
        uint256 callFeeToUser = (wftmFee * callFee) / PERCENT_DIVISOR;

        uint256 treasuryFeeToVault = (wftmFee * treasuryFee) / PERCENT_DIVISOR;

        uint256 feeToStrategist = (treasuryFeeToVault * strategistFee) /
            PERCENT_DIVISOR;
        treasuryFeeToVault = treasuryFeeToVault - feeToStrategist;
        console.log("feeToStrategist: ", feeToStrategist);
        console.log("treasuryFeeToVault: ", treasuryFeeToVault);

        IERC20(WFTM).safeTransfer(msg.sender, callFeeToUser);
        IERC20(WFTM).safeTransfer(treasury, treasuryFeeToVault);
        IERC20(WFTM).safeTransfer(strategist, feeToStrategist);
    }

    /**
     * @dev Swaps all {WFTM} into {TAROT}
     */
    function _swapWftmToTarot() internal returns (uint256 tarotBalance) {
        uint256 wftmBalance = IERC20(WFTM).balanceOf(address(this));
        if (wftmBalance != 0) {
            IUniswapRouterETH(UNI_ROUTER)
                .swapExactTokensForTokensSupportingFeeOnTransferTokens(
                    wftmBalance,
                    0,
                    wftmToTarotRoute,
                    address(this),
                    block.timestamp + 10
                );
            tarotBalance = IERC20(TAROT).balanceOf(address(this));
        }
    }

    function _enterXTarot(uint256 tarotBalance) internal {
        if (tarotBalance != 0) {
            ISupplyVault(XTAROT).enter(tarotBalance);
        }
    }

    /**
     * @dev Deposits into the highest yielding pool, up to a cap set by {maxPoolDilutionFactor}
     * If xToken remains to be deposited picks the 2nd highest yielding pool and so on.
     */
    function _rebalance() internal {
        uint256 xTarotBalance = XTAROT.balanceOf(address(this));
        uint256 nrOfDeposits = 0;
        while (xTarotBalance != 0) {
            uint256 bestYield = 0;
            uint256 bestYieldPoolId = currentlyUsedPools[0];
            uint256 bestYieldIndex = 0;
            for (
                uint256 index = 0;
                index < currentlyUsedPools.length;
                index++
            ) {
                uint256 poolId = currentlyUsedPools[index];
                if (hasAllocatedToPool[poolId]) continue;

                uint256 currentPoolYield = poolYield[poolId];
                if (currentPoolYield > bestYield) {
                    bestYield = currentPoolYield;
                    bestYieldPoolId = poolId;
                    bestYieldIndex = index;
                }
            }
            uint256 poolDepositAmount = xTarotBalance;
            IXStakingPoolController.PoolInfo
                memory poolInfo = IXStakingPoolController(POOL_CONTROLLER)
                    .poolInfo(bestYieldPoolId);
            bool isLastPool = currentlyUsedPools.length - nrOfDeposits == 1;
            if (
                !isLastPool &&
                poolDepositAmount >
                (poolInfo.xTAROTStakedAmount / maxPoolDilutionFactor)
            ) {
                poolDepositAmount = (poolInfo.xTAROTStakedAmount /
                    maxPoolDilutionFactor);
            }
            hasAllocatedToPool[bestYieldPoolId] = true;
            nrOfDeposits = nrOfDeposits + 1;
            _stakingControllerDeposit(bestYieldPoolId, poolDepositAmount);
            xTarotBalance = XTAROT.balanceOf(address(this));
            currentPoolId = bestYieldPoolId;
        }
    }

    /**
     * @dev Function to calculate the total underlaying {XTAROT} held by the strat.
     * It takes into account both the funds in hand, as the funds allocated in xBoo and the XStakingPoolController pools.
     */
    function balanceOf() public view override returns (uint256) {
        uint256 balance = balanceOfxTarot() + balanceOfPool();
        return balance;
    }

    /**
     * @dev It calculates how much {XTAROT} the contract holds.
     */
    function balanceOfxTarot() public view returns (uint256) {
        return IERC20(XTAROT).balanceOf(address(this));
    }

    /**
     * @dev It calculates how much {XTAROT} the strategy has allocated in the XStakingPoolController pools
     */
    function balanceOfPool() public view returns (uint256) {
        return totalPoolBalance;
    }

    /**
     * @dev Function that has to be called as part of strat migration. It sends all the available funds back to the
     * vault, ready to be migrated to the new strat.
     */
    function retireStrat() external {
        //require(msg.sender == vault, "!vault");
        for (uint256 index = 0; index < currentlyUsedPools.length; index++) {
            uint256 poolId = currentlyUsedPools[index];
            uint256 balance = poolxTarotBalance[poolId];
            _stakingControllerWithdraw(poolId, balance);
            _swapRewardToWftm(poolId);
        }

        _swapWftmToTarot();

        uint256 xTarotBalance = IERC20(XTAROT).balanceOf(address(this));
        XTAROT.transfer(vault, xTarotBalance);
    }

    /**
     * @dev Pauses deposits. Withdraws all funds from the AceLab contract, leaving rewards behind.
     */
    function panic() public {
        _onlyStrategistOrOwner();
        pause();

        for (uint256 index = 0; index < currentlyUsedPools.length; index++) {
            uint256 poolId = currentlyUsedPools[index];
            IXStakingPoolController(POOL_CONTROLLER).emergencyWithdraw(poolId);
        }
        uint256 xTarotBalance = XTAROT.balanceOf(address(this));
        XTAROT.transfer(vault, xTarotBalance);
    }

    /**
     * @dev Pauses the strat.
     */
    function pause() public onlyOwner {
        _pause();
        _removeAllowances();
    }

    /**
     * @dev Unpauses the strat.
     */
    function unpause() external onlyOwner {
        _unpause();

        _giveAllowances();

        deposit();
    }

    /**
     * @dev Gives max allowance of {XTAROT} for the {xBoo} contract,
     * {xBoo} allowance for the {POOL_CONTROLLER} contract,
     * {WFTM} allowance for the {UNI_ROUTER}
     * in addition to allowance to all pool rewards for the {UNI_ROUTER}.
     */
    function _giveAllowances() internal {
        // // Give xBoo contract permission to stake xBoo
        IERC20(TAROT).safeApprove(address(XTAROT), 0);
        IERC20(TAROT).safeApprove(address(XTAROT), type(uint256).max);
        // // Give xBoo contract permission to stake xBoo
        IERC20(XTAROT).safeApprove(POOL_CONTROLLER, 0);
        IERC20(XTAROT).safeApprove(POOL_CONTROLLER, type(uint256).max);
        // Give UNI_ROUTER permission to swap WFTM to XTAROT
        IERC20(WFTM).safeApprove(UNI_ROUTER, 0);
        IERC20(WFTM).safeApprove(UNI_ROUTER, type(uint256).max);
        _givePoolAllowances();
    }

    /**
     * @dev Removes all allowance of {stakingToken} for the {xToken} contract,
     * {xToken} allowance for the {aceLab} contract,
     * {wftm} allowance for the {uniRouter}
     * in addition to allowance to all pool rewards for the {uniRouter}.
     */
    function _removeAllowances() internal {
        // Remove xBoo contract permission to stake xBoo
        IERC20(TAROT).safeApprove(address(XTAROT), 0);
        // Remove xBoo contract permission to stake xBoo
        IERC20(XTAROT).safeApprove(POOL_CONTROLLER, 0);
        // Remove UNI_ROUTER permission to swap WFTM to XTAROT
        IERC20(WFTM).safeApprove(UNI_ROUTER, 0);
        _removePoolAllowances();
    }

    /**
     * @dev Gives max allowance to all pool rewards for the {UNI_ROUTER}.
     */
    function _givePoolAllowances() internal {
        for (uint256 index = 0; index < currentlyUsedPools.length; index++) {
            address[] storage rewardToWftmPaths = poolRewardToWftmPaths[
                currentlyUsedPools[index]
            ];
            IERC20 underlyingRewardToken = IERC20(rewardToWftmPaths[0]);

            underlyingRewardToken.safeApprove(UNI_ROUTER, 0);
            underlyingRewardToken.safeApprove(UNI_ROUTER, type(uint256).max);
        }
    }

    /**
     * @dev Removes all allowance to all pool rewards for the {UNI_ROUTER}.
     */
    function _removePoolAllowances() internal {
        for (uint256 index = 0; index < currentlyUsedPools.length; index++) {
            address[] storage rewardToWftmPaths = poolRewardToWftmPaths[
                currentlyUsedPools[index]
            ];
            IERC20 underlyingRewardToken = IERC20(rewardToWftmPaths[0]);

            underlyingRewardToken.safeApprove(UNI_ROUTER, 0);
        }
    }

    /**
     * @dev updates the {maxPoolDilutionFactor}
     */
    function updateMaxPoolDilutionFactor(uint8 _maxPoolDilutionFactor)
        external
    {
        _onlyStrategistOrOwner();
        require(
            _maxPoolDilutionFactor > 0,
            "Must be a positive pool dilution factor"
        );
        maxPoolDilutionFactor = _maxPoolDilutionFactor;
    }

    /**
     * @dev Adds a pool from the {aceLab} contract to be actively used to yield.
     * _poolRewardToWftmPath can be empty if the paths are standard rewardToken -> WFTM
     */
    function addUsedPool(
        uint256 _poolId,
        address[] memory _poolRewardToWftmPath
    ) external {
        _onlyStrategistOrOwner();
        require(currentlyUsedPools.length < maxNrOfPools, "Max pools reached");
        require(
            _poolRewardToWftmPath.length >= 2 ||
                (_poolRewardToWftmPath.length == 1 &&
                    _poolRewardToWftmPath[0] == WFTM),
            "Must have reward paths"
        );
        currentlyUsedPools.push(_poolId);
        poolRewardToWftmPaths[_poolId] = _poolRewardToWftmPath;

        address poolRewardToken = _poolRewardToWftmPath[0];
        if (poolRewardToken != WFTM) {
            IERC20(poolRewardToken).safeApprove(UNI_ROUTER, type(uint256).max);
        }
    }

    /**
     * @dev Removes a pool that will no longer be used.
     */
    function removeUsedPool(uint256 _poolIndex) external {
        _onlyStrategistOrOwner();
        uint256 poolId = currentlyUsedPools[_poolIndex];
        IERC20(poolRewardToWftmPaths[poolId][0]).safeApprove(UNI_ROUTER, 0);
        uint256 balance = poolxTarotBalance[poolId];
        _stakingControllerWithdraw(poolId, balance);
        uint256 lastPoolIndex = currentlyUsedPools.length - 1;
        uint256 lastPoolId = currentlyUsedPools[lastPoolIndex];
        currentlyUsedPools[_poolIndex] = lastPoolId;
        currentlyUsedPools.pop();

        if (currentPoolId == poolId) {
            currentPoolId = currentlyUsedPools[0];
        }
        _stakingControllerDeposit(currentPoolId, balance);
    }
}
